datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  name      String
  stationId Int?
  roleId    String?
  role      Role?    @relation(fields: [roleId], references: [id], name: "RoleUsers")
  email     String   @unique
  password  String
  reports   Report[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        String   @id @default(uuid())
  name      String
  users     User[]   @relation("RoleUsers")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id               String          @id @default(uuid())
  stationId        Int
  user_id          String
  user             User            @relation(fields: [user_id], references: [id])
  nameOfStation    String
  city             String
  inspectionTypeId String?
  inspectionType   InspectionType? @relation(fields: [inspectionTypeId], references: [id], name: "inspectionType")
  schoolId         Int?
  nameOfSchool     String?
  enNameOfschool   String?
  inspections      Inspection[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt()

  @@map("reports")
}

model Inspection {
  id                 String   @id @default(uuid())
  reportId           String
  name               String
  image              String   @db.LongText
  idOfBus            Int
  rootCause          String?
  correctiveAction   String?
  attachment         String?
  isClosed           Boolean  @default(false)
  noteClassification String
  description        String
  report             Report   @relation(fields: [reportId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt()

  @@map("inspections")
}

model InspectionType {
  id          String   @id @default(uuid())
  name        String
  inspections Report[] @relation("inspectionType")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model TrafficLine {
  id                  String   @id @default(uuid())
  name                String
  schoolId            Int
  schoolName          String
  stationId           Int
  stationName         String
  educationalLevel    String
  countOfStudents     Int
  transferredCategory String
  risks               Risk[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt()
}

model Risk {
  id                  String           @id @default(uuid())
  trafficLineId       String?
  questionId          Int?
  causeOfRisk         String?
  activity            String?
  typeOfActivity      String?
  hazardSource        String?
  risk                String?          @db.LongText
  peopleExposedToRisk String?
  riskAssessment      String?
  residualRisks       String?
  expectedInjury      String?
  controlMeasures     ControlMeasure[]
  trafficLine         TrafficLine?     @relation(fields: [trafficLineId], references: [id])
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model ControlMeasure {
  id      String @id @default(uuid())
  riskId  String
  measure String @db.LongText
  risk    Risk   @relation(fields: [riskId], references: [id])
}
