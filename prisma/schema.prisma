datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RoleEnum {
  ADMIN
  SAFETY_MANAGER
  SAFETY_DIRECTOR
  OPERATIONS_MANAGER
  SAFETY_OFFICER
}

model User {
  id           String        @id @default(uuid())
  name         String
  stationId    String?       @unique
  station      Station?      @relation(fields: [stationId], references: [id], name: "Station")
  roleId       String?
  role         Role?         @relation(fields: [roleId], references: [id], name: "RoleUsers")
  email        String        @unique
  password     String
  reports      Report[]
  trafficLines TrafficLine[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Role {
  id        String   @id @default(uuid())
  name      RoleEnum @unique
  users     User[]   @relation("RoleUsers")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Station {
  id              String        @id @default(uuid())
  name            String
  userId          String?       @unique
  user            User?         @relation(name: "Station")
  filterName      String
  translationName String
  schools         School[]
  TrafficLine     TrafficLine[]
}

model School {
  id              String        @id @default(uuid())
  name            String
  translationName String
  stationId       String
  station         Station       @relation(fields: [stationId], references: [id])
  contract        String
  trafficLine     TrafficLine[]
  risks           SchoolRisks[]
}

model SchoolRisks {
  id                  String                 @id @default(uuid())
  stationId           Int
  schoolId            String
  trafficLine         School?                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  questionId          Int?
  causeOfRisk         String?                @db.LongText
  activity            String?
  typeOfActivity      String?
  hazardSource        String?                @db.LongText
  risk                String?                @db.LongText
  peopleExposedToRisk String?
  riskAssessment      String?
  residualRisks       String?
  expectedInjury      String?
  controlMeasures     SchoolControlMeasure[]
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
}

model SchoolControlMeasure {
  id        String      @id @default(uuid())
  riskId    String
  measureAr String      @db.LongText
  measureEn String      @db.LongText
  risk      SchoolRisks @relation(fields: [riskId], references: [id], onDelete: Cascade)
}

model TrafficLine {
  id                  String            @id @default(uuid())
  name                String
  userId              String?
  user                User?             @relation(fields: [userId], references: [id])
  schoolId            String
  school              School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  stationId           String
  station             Station           @relation(fields: [stationId], references: [id], onDelete: Cascade)
  educationalLevel    String
  countOfStudents     Int
  transferredCategory String
  risks               TrafficLineRisk[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt()
  latitude            Float
  longitude           Float
}

model TrafficLineRisk {
  id              String           @id @default(uuid())
  trafficLineId   String?
  questionAnswers QuestionAnswer[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  trafficLine     TrafficLine?     @relation(fields: [trafficLineId], references: [id], onDelete: Cascade)
}

model QuestionAnswer {
  id                  String                      @id @default(uuid())
  trafficLineRiskId   String?
  questionId          Int
  question            String                      @db.LongText
  translatedQuestion  String                      @db.LongText
  answer              String                      @db.LongText
  causeOfRisk         String?                     @db.LongText
  activity            String?                     @db.LongText
  typeOfActivity      String?                     @db.LongText
  hazardSource        String?                     @db.LongText
  risk                String?                     @db.LongText
  peopleExposedToRisk String?                     @db.LongText
  riskAssessment      String?                     @db.LongText
  residualRisks       String?                     @db.LongText
  expectedInjury      String?                     @db.LongText
  controlMeasures     TraffikLineControlMeasure[]
  trafficLineRisk     TrafficLineRisk?            @relation(fields: [trafficLineRiskId], references: [id], onDelete: Cascade)
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
}

model TraffikLineControlMeasure {
  id               String         @id @default(uuid())
  questionAnswerId String
  measureAr        String         @db.LongText
  measureEn        String         @db.LongText
  questionAnswer   QuestionAnswer @relation(fields: [questionAnswerId], references: [id], onDelete: Cascade)
}

model Report {
  id               String          @id @default(uuid())
  stationId        Int
  user_id          String
  user             User            @relation(fields: [user_id], references: [id])
  nameOfStation    String
  city             String
  inspectionTypeId String?
  inspectionType   InspectionType? @relation(fields: [inspectionTypeId], references: [id], name: "inspectionType")
  schoolId         Int?
  nameOfSchool     String?
  enNameOfschool   String?
  inspections      Inspection[]
  approved         Boolean         @default(false)
  rejectionReason  String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt()

  @@map("reports")
}

model Inspection {
  id                 String                 @id @default(uuid())
  reportId           String
  name               String
  image              String                 @db.LongText
  idOfBus            Int
  rootCause          String?                @db.LongText
  correctiveAction   String?                @db.LongText
  attachment         InspectionAttachment[] @relation("InspectionAttachment")
  requirement        String?
  isClosed           Boolean                @default(false)
  noteClassification String
  description        String
  enDescription      String?
  report             Report                 @relation(fields: [reportId], references: [id], onDelete: Cascade)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt()
  DeleteRequest      DeleteRequest[]

  @@map("inspections")
}

model InspectionType {
  id          String   @id @default(uuid())
  name        String
  inspections Report[] @relation("inspectionType")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model InspectionAttachment {
  id           String     @id @default(uuid())
  name         String
  path         String
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id], name: "InspectionAttachment", onDelete: Cascade)
}

model DeleteRequest {
  id              String   @id @default(uuid())
  inspectionId    String
  reason          String
  status          String   @default("PENDING") // PENDING, APPROVED, REJECTED
  rejectionReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  inspection Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
}
