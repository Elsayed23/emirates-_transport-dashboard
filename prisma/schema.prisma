datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RoleEnum {
  ADMIN
  SAFETY_MANAGER
  SAFETY_DIRECTOR
  OPERATIONS_MANAGER
  SAFETY_OFFICER
}

enum TaskEnum {
  TRAFFIC_LINE_HAZARDS
  BUILDINGS_HAZARDS
  ELECTRONIC_SURVEILLANCE_REPORT
  BUILDINGS_REPORT
  BUSES_REPORT
}

enum TaskFrequencyEnum {
  MONTHLY
  INDIVIDUAL
  DAILY
  QUARTERLY
}

enum GenderEnum {
  MALE
  FEMALE
}

model User {
  id                String        @id @default(uuid())
  name              String
  station           Station?
  roleId            String?
  role              Role?         @relation(fields: [roleId], references: [id], name: "RoleUsers")
  email             String        @unique
  password          String
  gender            GenderEnum
  financialNumber   String?
  approved          Boolean       @default(false)
  reports           Report[]
  trafficLines      TrafficLine[]
  resetToken        String? // Add this field for storing reset token
  resetTokenExpires DateTime? // Add this field for storing token expiration time
  tasks             Task[]        @relation("UserTasks")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  Built             Built[]
}

model Task {
  id             String            @id @default(uuid())
  name           TaskEnum
  frequency      TaskFrequencyEnum
  taskCount      Int
  completedCount Int               @default(0)
  note           String?
  userId         String?
  scheduledFor   DateTime?
  user           User?             @relation(fields: [userId], references: [id], name: "UserTasks")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model Role {
  id        String   @id @default(uuid())
  name      RoleEnum @unique
  users     User[]   @relation("RoleUsers")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Station {
  id              String        @id @default(uuid())
  name            String
  userId          String?       @unique
  user            User?         @relation(fields: [userId], references: [id])
  filterName      String
  translationName String
  schools         School[]
  TrafficLine     TrafficLine[]
  Report          Report[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model School {
  id              String         @id @default(uuid())
  name            String
  translationName String
  stationId       String
  station         Station        @relation(fields: [stationId], references: [id])
  contract        String
  trafficLine     TrafficLine[]
  risks           SchoolRisks[]
  UserResponse    UserResponse[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model SchoolRisks {
  id                  String                 @id @default(uuid())
  schoolId            String
  questionId          String
  school              School?                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  question            Question               @relation(fields: [questionId], references: [id], onDelete: Cascade, name: "QuestionSchoolRisks")
  causeOfRisk         String?                @db.LongText
  activity            String?
  typeOfActivity      String?
  hazardSource        String?                @db.LongText
  risk                String?                @db.LongText
  peopleExposedToRisk String?
  riskAssessment      String?
  residualRisks       String?
  expectedInjury      String?
  controlMeasures     SchoolControlMeasure[]
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
}

model SchoolControlMeasure {
  id     String      @id @default(uuid())
  riskId String
  ar     String      @db.LongText
  en     String      @db.LongText
  risk   SchoolRisks @relation(fields: [riskId], references: [id], onDelete: Cascade)
}

model TrafficLine {
  id                  String             @id @default(uuid())
  name                String
  userId              String?
  user                User?              @relation(fields: [userId], references: [id])
  schoolId            String
  school              School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  stationId           String
  station             Station            @relation(fields: [stationId], references: [id], onDelete: Cascade)
  educationalLevel    String
  countOfStudents     Int
  transferredCategory String
  risks               UserResponse[]
  latitude            Float
  longitude           Float
  images              TrafficLineImage[] @relation(name: "TrafficLineImages")
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt()
}

model TrafficLineImage {
  id            String      @id @default(uuid())
  trafficLineId String
  trafficLine   TrafficLine @relation(fields: [trafficLineId], references: [id], onDelete: Cascade, name: "TrafficLineImages")
  imageUrl      String
  createdAt     DateTime    @default(now())
}

model Built {
  id        String         @id @default(uuid())
  name      String
  cityName  String
  risks     UserResponse[]
  userId    String?
  user      User?          @relation(fields: [userId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Question {
  id                 String         @id @default(uuid())
  question           String         @db.LongText
  translatedQuestion String         @db.LongText
  orderd             Int
  appliesTo          String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  answers            Answer[]
  userResponses      UserResponse[]
  schoolRisks        SchoolRisks[]  @relation("QuestionSchoolRisks")
}

model Answer {
  id                  String           @id @default(uuid())
  questionId          String           @unique
  causeOfRisk         String?          @db.LongText
  activity            String?          @db.LongText
  typeOfActivity      String?          @db.LongText
  hazardSource        String?          @db.LongText
  risk                String?          @db.LongText
  peopleExposedToRisk String?          @db.LongText
  riskAssessment      String?          @db.LongText
  residualRisks       String?          @db.LongText
  expectedInjury      String?          @db.LongText
  controlMeasures     ControlMeasure[]
  question            Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model UserResponse {
  id            String       @id @default(uuid())
  questionId    String
  trafficLineId String?
  schoolId      String?
  builtId       String?
  response      String       @db.LongText
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  question      Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  trafficLine   TrafficLine? @relation(fields: [trafficLineId], references: [id], onDelete: Cascade)
  school        School?      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  built         Built?       @relation(fields: [builtId], references: [id], onDelete: Cascade)
}

model ControlMeasure {
  id        String   @id @default(uuid())
  ar        String   @db.LongText
  en        String   @db.LongText
  answerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
}

model Report {
  id               String          @id @default(uuid())
  stationId        String
  station          Station         @relation(fields: [stationId], references: [id])
  user_id          String
  user             User            @relation(fields: [user_id], references: [id])
  nameOfStation    String
  city             String
  inspectionTypeId String?
  inspectionType   InspectionType? @relation(fields: [inspectionTypeId], references: [id], name: "inspectionType")
  // schoolId         String
  // school           School          @relation(fields: [schoolId], references: [id])
  nameOfSchool     String?
  enNameOfschool   String?
  inspections      Inspection[]
  approved         Boolean         @default(false)
  rejectionReason  String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt()

  @@map("reports")
}

model Inspection {
  id                 String                 @id @default(uuid())
  reportId           String
  name               String
  image              String                 @db.LongText
  idOfBus            Int
  rootCause          String?                @db.LongText
  correctiveAction   String?                @db.LongText
  attachment         InspectionAttachment[] @relation("InspectionAttachment")
  requirement        String?
  isClosed           Boolean                @default(false)
  noteClassification String
  description        String
  enDescription      String?
  report             Report                 @relation(fields: [reportId], references: [id], onDelete: Cascade)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt()
  DeleteRequest      DeleteRequest[]

  @@map("inspections")
}

model InspectionType {
  id           String        @id @default(uuid())
  name         String
  inspections  Report[]      @relation("inspectionType")
  requirements Requirement[] @relation("InspectionTypeRequirement")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
}

model Requirement {
  id               String         @id @default(uuid())
  requirement      String
  notes            Note[]         @relation("RequirementNotes")
  inspectionType   InspectionType @relation("InspectionTypeRequirement", fields: [inspectionTypeId], references: [id], onDelete: Cascade)
  inspectionTypeId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt()
}

model Note {
  id                 String      @id @default(uuid())
  ar                 String
  en                 String
  noteClassification String
  requirement        Requirement @relation("RequirementNotes", fields: [requirementId], references: [id], onDelete: Cascade)
  requirementId      String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt()
}

model InspectionAttachment {
  id           String     @id @default(uuid())
  name         String
  path         String
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id], name: "InspectionAttachment", onDelete: Cascade)
}

model DeleteRequest {
  id              String   @id @default(uuid())
  inspectionId    String
  reason          String
  status          String   @default("PENDING") // PENDING, APPROVED, REJECTED
  rejectionReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  inspection Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
}
